{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "http://json-schema.org/draft-07/schema#",
    "title": "Modified core schema meta-schema",
    "description": "Extended JSON schema for hpp code generation.",
    "@ropufu-remark": "Changed core \"$schema/format\" to \"uri-reference\" instead of \"uri\".",
    "definitions": {
        "schemaArray": {
            "type": "array",
            "minItems": 1,
            "items": {
                "$ref": "#"
            }
        },
        "nonNegativeInteger": {
            "type": "integer",
            "minimum": 0
        },
        "nonNegativeIntegerDefault0": {
            "allOf": [
                {
                    "$ref": "#/definitions/nonNegativeInteger"
                },
                {
                    "default": 0
                }
            ]
        },
        "simpleTypes": {
            "enum": [
                "array",
                "boolean",
                "integer",
                "null",
                "number",
                "object",
                "string"
            ]
        },
        "stringArray": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "uniqueItems": true,
            "default": []
        }
    },
    "type": [
        "object",
        "boolean"
    ],
    "properties": {
        "$id": {
            "type": "string",
            "format": "uri-reference"
        },
        "$schema": {
            "type": "string",
            "format": "uri-reference"
        },
        "$ref": {
            "type": "string",
            "format": "uri-reference"
        },
        "$comment": {
            "type": "string"
        },
        "title": {
            "type": "string"
        },
        "description": {
            "type": "string"
        },
        "default": true,
        "readOnly": {
            "type": "boolean",
            "default": false
        },
        "writeOnly": {
            "type": "boolean",
            "default": false
        },
        "examples": {
            "type": "array",
            "items": true
        },
        "multipleOf": {
            "type": "number",
            "exclusiveMinimum": 0
        },
        "maximum": {
            "type": "number"
        },
        "exclusiveMaximum": {
            "type": "number"
        },
        "minimum": {
            "type": "number"
        },
        "exclusiveMinimum": {
            "type": "number"
        },
        "maxLength": {
            "$ref": "#/definitions/nonNegativeInteger"
        },
        "minLength": {
            "$ref": "#/definitions/nonNegativeIntegerDefault0"
        },
        "pattern": {
            "type": "string",
            "format": "regex"
        },
        "additionalItems": {
            "$ref": "#"
        },
        "items": {
            "anyOf": [
                {
                    "$ref": "#"
                },
                {
                    "$ref": "#/definitions/schemaArray"
                }
            ],
            "default": true
        },
        "maxItems": {
            "$ref": "#/definitions/nonNegativeInteger"
        },
        "minItems": {
            "$ref": "#/definitions/nonNegativeIntegerDefault0"
        },
        "uniqueItems": {
            "type": "boolean",
            "default": false
        },
        "contains": {
            "$ref": "#"
        },
        "maxProperties": {
            "$ref": "#/definitions/nonNegativeInteger"
        },
        "minProperties": {
            "$ref": "#/definitions/nonNegativeIntegerDefault0"
        },
        "required": {
            "$ref": "#/definitions/stringArray"
        },
        "additionalProperties": {
            "$ref": "#"
        },
        "definitions": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#"
            },
            "default": {}
        },
        "properties": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#"
            },
            "default": {}
        },
        "patternProperties": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#"
            },
            "propertyNames": {
                "format": "regex"
            },
            "default": {}
        },
        "dependencies": {
            "type": "object",
            "additionalProperties": {
                "anyOf": [
                    {
                        "$ref": "#"
                    },
                    {
                        "$ref": "#/definitions/stringArray"
                    }
                ]
            }
        },
        "propertyNames": {
            "$ref": "#"
        },
        "const": true,
        "enum": {
            "type": "array",
            "items": true,
            "minItems": 1,
            "uniqueItems": true
        },
        "type": {
            "anyOf": [
                {
                    "$ref": "#/definitions/simpleTypes"
                },
                {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/simpleTypes"
                    },
                    "minItems": 1,
                    "uniqueItems": true
                }
            ]
        },
        "format": {
            "type": "string"
        },
        "contentMediaType": {
            "type": "string"
        },
        "contentEncoding": {
            "type": "string"
        },
        "if": {
            "$ref": "#"
        },
        "then": {
            "$ref": "#"
        },
        "else": {
            "$ref": "#"
        },
        "allOf": {
            "$ref": "#/definitions/schemaArray"
        },
        "anyOf": {
            "$ref": "#/definitions/schemaArray"
        },
        "oneOf": {
            "$ref": "#/definitions/schemaArray"
        },
        "not": {
            "$ref": "#"
        },
        "@ropufu-namespace": {
            "type": "string",
            "description": "Namespace the type is to live in."
        },
        "@ropufu-typename": {
            "type": [
                "string",
                "null"
            ],
            "description": "Type this schema describes."
        },
        "@ropufu-target-path": {
            "type": [
                "string",
                "null"
            ],
            "description": "Target path for generated header file."
        },
        "@ropufu-templates": {
            "type": "array",
            "description": "List of templates for the generated class.",
            "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "key": {
                        "type": "string",
                        "minLength": 1,
                        "examples": ["typename", "std::floating_point"]
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1
                    },
                    "alias": {
                        "type": "string"
                    }
                }
            }
        },
        "@ropufu-includes": {
            "type": "array",
            "description": "List of headers to include in the generated header.",
            "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "header": {
                        "type": "string",
                        "minLength": 1
                    },
                    "comment": {
                        "type": "string"
                    }
                }
            }
        },
        "@ropufu-inherits": {
            "type": "array",
            "description": "List of inherited classes for the generated class.",
            "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "mode": {
                        "type": "string",
                        "enum": ["public", "protected", "private"]
                    },
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "examples": [
                            "my_namespace::my_base_name<std::size_t>"
                        ]
                    },
                    "constructor arguments": {
                        "type": "string",
                        "description": "Arguments format to pass to inherited constructor taking required arguments for formatting.",
                        "@comment": "Zero-based indices correspond to properties in the required list. Default constructor passes default values of said properties.",
                        "examples": [
                            "1729, \"Hello, world!\"",
                            "{0}, \"Hello, world!\"",
                            "{0}, {1}"
                        ]
                    },
                    "error message call": {
                        "type": "string",
                        "description": "Call to error message: () const noexcept -> std::optional<std::string>.",
                        "$comment": "If left blank, inherited typename is assumed not to throw exceptions.",
                        "examples": [
                            "error_message()"
                        ]
                    }
                },
                "required": ["mode", "name"]
            }
        },
        "@ropufu-default-value": {
            "type": "string",
            "description": "Explicit code for the default value."
        },
        "@ropufu-validation-message": {
            "type": "string",
            "description": "Message to generate when validation fails."
        },
        "@ropufu-invalid-formats": {
            "type": "array",
            "description": "List of invalid one-parameter formats for validation purposes.",
            "items": {
                "type": "string",
                "minLength": 1
            }
        },
        "@ropufu-is-inherited": {
            "type": "boolean",
            "description": "If this schema describes a property in another schema, indicates that the property is inherited from a base class.",
            "default": false
        },
        "@ropufu-hard-enums": {
            "type": "boolean",
            "description": "Indicates if the permissible values (if any) are to be hard-coded.",
            "default": false
        },
        "@ropufu-extensions": {
            "type": "array",
            "description": "Additional lines of code to add to the struct body, e.g., function signatures that will be defined elsewhere.",
            "items": {
                "type": "string"
            }
        }
    },
    "default": true
}